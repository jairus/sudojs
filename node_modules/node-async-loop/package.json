{
  "_args": [
    [
      {
        "raw": "node-async-loop@^1.2.2",
        "scope": null,
        "escapedName": "node-async-loop",
        "name": "node-async-loop",
        "rawSpec": "^1.2.2",
        "spec": ">=1.2.2 <2.0.0",
        "type": "range"
      },
      "D:\\node\\sudojs"
    ]
  ],
  "_from": "node-async-loop@>=1.2.2 <2.0.0",
  "_id": "node-async-loop@1.2.2",
  "_inCache": true,
  "_location": "/node-async-loop",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/node-async-loop-1.2.2.tgz_1473469535148_0.7805917204823345"
  },
  "_npmUser": {
    "name": "nathan818",
    "email": "nathan@poirier.io"
  },
  "_npmVersion": "1.4.21",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-async-loop@^1.2.2",
    "scope": null,
    "escapedName": "node-async-loop",
    "name": "node-async-loop",
    "rawSpec": "^1.2.2",
    "spec": ">=1.2.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-async-loop/-/node-async-loop-1.2.2.tgz",
  "_shasum": "c5870299bf6477b780c88b431aa5b37733f55a3d",
  "_shrinkwrap": null,
  "_spec": "node-async-loop@^1.2.2",
  "_where": "D:\\node\\sudojs",
  "author": {
    "name": "Nathan Poirier",
    "email": "nathan@poirier.io"
  },
  "bugs": {
    "url": "https://github.com/nathan818fr/async-loop/issues"
  },
  "dependencies": {},
  "description": "Loop through an array to execute asynchronous actions on each element.",
  "devDependencies": {
    "chai": "^3.2.0",
    "mocha": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "c5870299bf6477b780c88b431aa5b37733f55a3d",
    "tarball": "https://registry.npmjs.org/node-async-loop/-/node-async-loop-1.2.2.tgz"
  },
  "gitHead": "5e8fbdd8f647568a259b21b91a8677d52018653e",
  "homepage": "https://github.com/nathan818fr/async-loop#readme",
  "keywords": [
    "async-loop",
    "arrays",
    "async",
    "loop"
  ],
  "license": "ISC",
  "main": "async-loop.js",
  "maintainers": [
    {
      "name": "nathan818",
      "email": "nathan@poirier.io"
    }
  ],
  "name": "node-async-loop",
  "optionalDependencies": {},
  "readme": "# node-async-loop\n\n[![Build Status](https://travis-ci.org/nathan818fr/async-loop.svg)](https://travis-ci.org/nathan818fr/async-loop)\n\nLoop through an array to execute asynchronous actions on each element.\n\nSometimes you must execute an asynchronous action on each elements of an array, but you must wait for the previous\naction to complete before proceed to the next.\n\nFeatures:\n* Loop through arrays\n* Loop through objects\n* Loop in the normal direction or in the reverse direction\n* Error handling\n* A callback is called for the end of the loop\n\n## Install ##\n```\nnpm install --save node-async-loop\n```\n\n## Function ##\n```js\nvar asyncLoop = require('node-async-loop');\n\nasyncLoop(array[, from[, to]], callback[, endCallback]);\n```\n\n**array:** *array*\n\nThe array to loop\n\n**from (optionnal):** *integer*\n\nThe starting position, including (Default: 0).\n\n**to (optionnal):** *integer*\n\nThe final position, including (Default: array.length - 1).\n\n**callback:** *function(item, next)*\n\nThe function called for every elements.\nIt must call `next()` so that the next array element is executed.\nAt the end `endCallback` will be called!\n\nOn error it must call `next(errorObject)` and iteration will be stopped and the endCallback called with errorObject.\n\n**endCallback (optionnal):** *function(err)*\n\nThis function is called at the end.\n\nThe `err` variable is null if everything was fine, otherwise it contains the error.\n\n## Usage ##\n\n### Basic Usage ###\nGeneral usage:\n```js\nvar asyncLoop = require('node-async-loop');\n\nvar array = ['item0', 'item1', 'item2'];\nasyncLoop(array, function (item, next)\n{\n    do.some.action(item, function (err)\n    {\n        if (err)\n        {\n            next(err);\n            return;\n        }\n\n        next();\n    });\n}, function (err)\n{\n    if (err)\n    {\n        console.error('Error: ' + err.message);\n        return;\n    }\n\n    console.log('Finished!');\n});\n```\n\nFor example, create folder recursively:\n```js\nvar fs = require('fs');\nvar asyncLoop = require('node-async-loop');\n\nvar directories = ['test', 'test/hello', 'test/hello/world'];\nasyncLoop(directories, function (directory, next)\n{\n    fs.mkdir(directory, function (err)\n    {\n        if (err)\n        {\n            next(err);\n            return;\n        }\n\n        next();\n    });\n}, function (err)\n{\n    if (err)\n    {\n        console.error('Error: ' + err.message);\n        return;\n    }\n\n    console.log('Finished!');\n});\n```\n\n### Loop Partially and in reverse order! ###\n```js\nvar asyncLoop = require('node-async-loop');\n\nvar displayItem = function(item, next) {\n    console.log(item);\n    next();\n}\n\nvar array = ['A', 'B', 'C', 'D', 'E', 'F'];\n\n// Loop all\nasyncLoop(array, displayItem); // A, B, C, D, E, F\nasyncLoop(array, 0, displayItem); // A, B, C, D, E, F\nasyncLoop(array, 0, array.length - 1, displayItem); // A, B, C, D, E, F\n\n// Loop partially to the end\nasyncLoop(array, 1, displayItem); // B, C, D, E, F\nasyncLoop(array, 2, displayItem); // C, D, E, F\n\n// Loop partially\nasyncLoop(array, 1, 3, displayItem); // B, C, D\nasyncLoop(array, 0, 1, displayItem); // A, B\nasyncLoop(array, 0, 2, displayItem); // A, B, C\n\n// Loop partially in reverse order\nasyncLoop(array, 3, 1, displayItem); // D, C, B\nasyncLoop(array, 1, 0, displayItem); // B, B\nasyncLoop(array, 2, 0, displayItem); // C, B, A\n\n// Loop partially, using negative from/to values\n// -1 is the last element (F)\n// -2 is the before last element (E)\n// -3 ... (D)\n// ...\nasyncLoop(array, 0, -2, displayItem); // A, B, C, D, E\nasyncLoop(array, 1, -2, displayItem); // B, C, D, E\n\n// So to loop in reverse order you can do\nasyncLoop(array, array.length - 1, 0, displayItem); // F, E, D, C, B, A\n// or simply\nasyncLoop(array, -1, 0, displayItem); // F, E, D, C, B, A\n// or simply simply\nasyncLoop(array, -1, displayItem); // F, E, D, C, B, A\n\n// Other examples\nasyncLoop(array, -2, displayItem); // E, D, C, B, A\nasyncLoop(array, -2, -4, displayItem); // E, D, C\nasyncLoop(array, -4, -2, displayItem); // C, D, E\n```\n\n### Loop through objects ###\n```js\nvar asyncLoop = require('node-async-loop');\n\nvar obj = {\n    'aa': 'AAAA',\n    'bb': 'BBBB',\n    'cc': 'CCCC',\n    'dd': 'DDDD',\n    'ee': 'EEEE'\n};\n\nasyncLoop(obj, function (item, next)\n{\n    console.log(item);\n    // Get object key with: item.key\n    // Get associated value with: item.value\n    next();\n}, function ()\n{\n    console.log('Finished!');\n});\n\n// Output:\n//\n// { key: 'aa', value: 'AAAA' }\n// { key: 'bb', value: 'BBBB' }\n// { key: 'cc', value: 'CCCC' }\n// { key: 'dd', value: 'DDDD' }\n// { key: 'ee', value: 'EEEE' }\n// Finished!\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nathan818fr/async-loop.git"
  },
  "scripts": {
    "test": "mocha test/"
  },
  "version": "1.2.2"
}
